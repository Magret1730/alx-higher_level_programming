Importing module
>>> add_integer = __import__('0-add_integer').add_integer

Testing for positive integers
>>> add_integer(5, 4)
9

# Testing for negative integars in three instances
# Testing for negative integars on the second parameter
>>> add_integer(5, -4)
1

# Testing for negative integars on the first parameter
>>> add_integer(-5, 4)
-1

# Testing for negative integars on both parameters
>>> add_integer(-5, -4)
-9

# Testing for floats
# Testing first parameter
>>> add_integer(5.98, 23)
28

# Testing second parameter
>>> add_integer(43, 7.0986)
50

# Testing both parameters
>>> add_integer(7.867, 45.09876)
52

# Testing for no input
# on both parameters
>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

# on one parameter
>>> add_integer(6)
104

# on second parameter
>>> add_integer( ,5)
Traceback (most recent call last):
SyntaxError: invalid syntax

# Syntax errors
>>> add_integer( 7,,)
Traceback (most recent call last):
SyntaxError: invalid syntax

# Syntax errors
>>> add_integer( 7,8,,)
Traceback (most recent call last):
SyntaxError: invalid syntax

# Syntax errors
>>> add_integer(%$@)
Traceback (most recent call last):
SyntaxError: invalid syntax

# Testing for strings
# on the first parameter
>>> add_integer('cat', 6)
Traceback (most recent call last):
TypeError: a must be an integer

# on the second parameter
>>> add_integer(6, 'dog')
Traceback (most recent call last):
TypeError: b must be an integer

# on both parameters
>>> add_integer('cat', 'dog')
Traceback (most recent call last):
TypeError: a must be an integer

# Testing for three args or more
>>> add_integer (6, 9, 9)
Traceback (most recent call last):
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

# Testing for large numbers
# on integer
>>> add_integer (987676543123987676543123987676543123987676543123987676543123987676543123987676543123987676543123987676543123987676543123, 987676543123987676543123987676543123987676543123987676543123987676543123987676543123987676543123987676543123987676543123987676543123)
987676543124975353086247975353086247975353086247975353086247975353086247975353086247975353086247975353086247975353086247975353086246

# on float
>>> add_integer (345987654234987.345987654234987, 345987654234987.345987654234987)
691975308469974

# Testing on None
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

# Float infinity
>>> add_integer(1e5000, 76)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

# Not a Number(NaN)
>>> add_integer(float("nan"), 4)
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
